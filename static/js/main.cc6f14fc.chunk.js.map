{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","res","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAeeA,MAbf,WACI,OAEI,gCACA,yBACIC,IAAI,iEACJC,IAAI,aAER,+C,iDC6DOC,E,YAnEX,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPC,QAAU,GACVC,WAAY,GACZC,QAAS,gCACTC,YAAa,IAIjB,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBAXT,E,iFAeO,IAAD,OACfE,MAAM,qCACLC,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACdF,KAAK,SAAAC,GAAM,IACDE,EAAUF,EAAIG,KAAdD,MACP,EAAKE,SAAS,CAACV,YAAYQ,Q,mCAMtBG,GAAO,IAAD,EACMA,EAAMC,OAApBC,EADQ,EACRA,KAAKC,EADG,EACHA,MACZC,KAAKL,SAAL,eAAgBG,EAAMC,M,mCAGbH,GACTA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAASL,KAAKnB,MAAMI,YAAYqB,QAC1DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CAACX,QAAQuB,M,+BAM3B,OACI,6BACA,0BAAME,UAAU,YAAYC,SAAUV,KAAKZ,cACvC,2BAAOU,KAAK,UACZa,YAAY,WACZZ,MAAOC,KAAKnB,MAAMC,QAClB8B,SAAUZ,KAAKd,eAEf,2BAAOY,KAAK,aACZa,YAAY,cACZZ,MAAOC,KAAKnB,MAAME,WAClB6B,SAAUZ,KAAKd,eACf,6CAEJ,yBAAKuB,UAAU,QACX,yBAAK/B,IAAKsB,KAAKnB,MAAMG,QAASL,IAAI,KAClC,wBAAI8B,UAAU,OAAOT,KAAKnB,MAAMC,SAChC,wBAAI2B,UAAU,UAAUT,KAAKnB,MAAME,kB,GA5DnB8B,aCYbC,MATf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.cc6f14fc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(){\r\n    return(\r\n\r\n        <header>\r\n        <img \r\n            src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n            alt=\"Problem?\"\r\n        />\r\n        <p>Meme Generator</p>\r\n    </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React,{Component} from 'react'\r\n\r\nclass MemeGenerator extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            topText : \"\",\r\n            bottomText: \"\",\r\n            randImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n\r\n        }\r\n\r\n        this.handleChange=this.handleChange.bind(this)\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(res=>res.json())\r\n        .then(res=>{\r\n            const {memes}  = res.data\r\n            this.setState({allMemeImgs:memes})\r\n        })\r\n\r\n\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name,value} = event.target\r\n        this.setState({[name]:value})     \r\n    }\r\n\r\n    handleSubmit(event){    \r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random()*this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({randImg:randMemeImg})\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n    return(\r\n        <div>\r\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n            <input name=\"topText\" \r\n            placeholder=\"Top Text\" \r\n            value={this.state.topText}\r\n            onChange={this.handleChange}/>\r\n\r\n            <input name=\"bottomText\" \r\n            placeholder=\"Bottom Text\" \r\n            value={this.state.bottomText}\r\n            onChange={this.handleChange}/>\r\n            <button>Generate</button>\r\n        </form>\r\n        <div className=\"meme\">\r\n            <img src={this.state.randImg} alt=\"\"/>\r\n            <h2 className=\"top\">{this.state.topText}</h2>\r\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n\r\n        </div>\r\n\r\n    )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator;","import React from 'react';\nimport './App.css';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MemeGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}